name: llm

networks:
  shared:
    external: true

services:
  ragflow:
    container_name: ragflow
    image: infiniflow/ragflow:v0.19.0-slim
    restart: always
    environment:
      - TZ=${TZ}
    volumes:
      - ${APP_DATA}/llm/ragflow:/app/data
    ports:
      - 8888:80
    labels:
      - traefik.enable=true
      - traefik.http.routers.ragflow.rule=Host(`ragflow.${ROOT_DOMAIN}`)
      - traefik.http.routers.ragflow.tls=true
      - traefik.http.routers.ragflow.entrypoints=websecure
      - traefik.http.routers.ragflow.tls.certresolver=resolver
      - traefik.http.services.ragflow.loadbalancer.server.port=80

  searxng:
    container_name: searxng
    image: searxng/searxng
    restart: always
    environment:
      - INSTANCE_NAME=smissingham
      - BASE_URL="https://searxng.${ROOT_DOMAIN}"
    volumes:
      - ${APP_CONFIG}/llm/searxng:/etc/searxng
    labels:
      - traefik.enable=true
      - traefik.http.routers.searxng.rule=Host(`searxng.${ROOT_DOMAIN}`)
      - traefik.http.routers.searxng.tls=true
      - traefik.http.routers.searxng.entrypoints=websecure
      - traefik.http.routers.searxng.tls.certresolver=resolver
      - traefik.http.services.searxng.loadbalancer.server.port=8080

  open-webui:
    container_name: open-webui
    image: ghcr.io/open-webui/open-webui:main
    restart: always
    depends_on:
      - ollama
      - litellm
    environment:
      # Options: https://docs.openwebui.com/getting-started/env-configuration/
      - TZ=${TZ}
      
      # force config reload from these env vars instead of persisting to appdata folder
      - ENABLE_PERSISTENT_CONFIG=False

      - ENABLE_DIRECT_CONNECTIONS=True
      - ENABLE_OLLAMA_API=True
      - OLLAMA_BASE_URL=http://ollama:11434

      #- WEBUI_AUTH=False
      - WEBUI_URL=https://chat.${ROOT_DOMAIN}

      - ENABLE_WEB_SEARCH=True
      - WEB_SEARCH_ENGINE=tavily
      - SEARXNG_QUERY_URL=http://searxng:8080/search?q=<query>

      - TAVILY_API_KEY=${TAVILY_API_KEY}
      #- OPENROUTER_API_KEY=${OPENROUTER_API_KEY}

      - ENABLE_OPENAI_API=True
      #- OPENAI_API_BASE_URL=https://litellm.${ROOT_DOMAIN}/v1
      #- OPENAI_API_KEY=${LITELLM_MASTER_KEY}
      - OPENAI_API_BASE_URL=https://openrouter.ai/api/v1
      - OPENAI_API_KEY=${OPENROUTER_API_KEY}
      - PDF_EXTRACT_IMAGES=True

      - USE_CUDA_DOCKER=True
    volumes:
      - ${APP_DATA}/llm/open-webui:/app/backend/data
    devices:
      - nvidia.com/gpu=all # allow gpu access for local whisper/embedding model acceleration
    labels:
      - traefik.enable=true
      - traefik.http.routers.openwebui.rule=Host(`chat.${ROOT_DOMAIN}`)
      - traefik.http.routers.openwebui.tls=true
      - traefik.http.routers.openwebui.entrypoints=websecure
      - traefik.http.routers.openwebui.tls.certresolver=resolver
      - traefik.http.services.openwebui.loadbalancer.server.port=8080

  ollama:
    container_name: ollama
    image: ollama/ollama:latest
    restart: always
    hostname: ollama
    environment:
      - TZ=${TZ}
      - OLLAMA_KEEP_ALIVE=24h
    volumes:
      - ${APP_DATA}/llm/ollama:/root/.ollama
    devices:
      - nvidia.com/gpu=all
    labels:
      - traefik.enable=true
      - traefik.http.routers.ollama.rule=Host(`ollama.${ROOT_DOMAIN}`)
      - traefik.http.routers.ollama.tls=true
      - traefik.http.routers.ollama.entrypoints=websecure
      - traefik.http.routers.ollama.tls.certresolver=resolver
      - traefik.http.services.ollama.loadbalancer.server.port=11434

  litellm:
    container_name: litellm
    restart: always
    image: ghcr.io/berriai/litellm:main-latest
    networks:
      - shared
    env_file: ".env"
    environment:
      - LITELLM_MASTER_KEY=${LITELLM_MASTER_KEY}
      - UI_USERNAME=${ADMIN_USERNAME}
      - UI_PASSWORD=${ADMIN_PASSWORD}
      - DATABASE_URL=postgresql://${ADMIN_USERNAME}:${ADMIN_PASSWORD}@postgres:5432/litellm
      - LITELLM_LOG=ERROR
      - JSON_LOGS=True
    volumes:
      - ${APP_CONFIG}/llm/litellm/config:/config
    command:
      - --config=/config/config.yaml
    labels:
      - traefik.enable=true
      - traefik.http.routers.litellm.rule=Host(`litellm.${ROOT_DOMAIN}`)
      - traefik.http.routers.litellm.tls=true
      - traefik.http.routers.litellm.entrypoints=websecure
      - traefik.http.routers.litellm.tls.certresolver=resolver
      - traefik.http.services.litellm.loadbalancer.server.port=4000
  
  mcpo:
    container_name: mcpo
    restart: always
    image: ghcr.io/open-webui/mcpo:main
    env_file: ".env"
    volumes:
      - ${APP_CONFIG}/llm/mcpo:/app/config
      - ${APP_DATA}/llm/mcpo:/app/data
    command:
      - '--config'
      - '/app/config/config.json'
    ports:
      - 8000:8000
    labels:
      - traefik.enable=true
      - traefik.http.routers.mcpo.rule=Host(`mcpo.${ROOT_DOMAIN}`)
      - traefik.http.routers.mcpo.tls=true
      - traefik.http.routers.mcpo.entrypoints=websecure
      - traefik.http.routers.mcpo.tls.certresolver=resolver
      - traefik.http.services.mcpo.loadbalancer.server.port=8000
 

  # comfyui:
  #   container_name: comfyui
  #   image: docker.io/yanwk/comfyui-boot:cu124-megapak
  #   restart: always
  #   environment:
  #     - TZ=${TZ}
  #     - LD_LIBRARY_PATH=/lib:/lib
  #     #- CLI_ARGS=""
  #   volumes:
  #     - ${APP_DATA}/llm/comfyui:/root
  #   devices:
  #     - nvidia.com/gpu=all
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.comfyui.rule=Host(`comfyui.${ROOT_DOMAIN}`)
  #     - traefik.http.routers.comfyui.tls=true
  #     - traefik.http.routers.comfyui.entrypoints=websecure
  #     - traefik.http.routers.comfyui.tls.certresolver=resolver
  #     - traefik.http.services.comfyui.loadbalancer.server.port=8188
  
  # kokoro:
  #   container_name: kokoro
  #   image: ghcr.io/remsky/kokoro-fastapi-gpu
  #   restart: always
  #   environment:
  #     - TZ=${TZ}
  #   volumes:
  #     - ${APP_DATA}/llm/kokoro:/data
  #   devices:
  #     - nvidia.com/gpu=all
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.kokoro.rule=Host(`kokoro.${ROOT_DOMAIN}`)
  #     - traefik.http.routers.kokoro.tls=true
  #     - traefik.http.routers.kokoro.entrypoints=websecure
  #     - traefik.http.routers.kokoro.tls.certresolver=resolver
  #     - traefik.http.services.kokoro.loadbalancer.server.port=8000
